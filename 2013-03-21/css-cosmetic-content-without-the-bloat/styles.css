* {
  -webkit-box-sizing: border-box;
  -moz-box-sizing:    border-box;
  -ms-box-sizing:     border-box;
  -o-box-sizing:      border-box;
  box-sizing:         border-box;
}

body, button, input, select, textarea {
	font-family: 'PT Sans', sans-serif;
}

body {
    line-height: 1.5;
    color: rgb(80, 80, 80);
    text-shadow: 0 2px 2px rgba(0, 0, 0, .1);
    min-height: 740px;

    background: #e1e1e1;
    background: -webkit-gradient(radial, 50% 50%, 0, 50% 50%, 500, from(rgb(240, 240, 240)), to(rgb(190, 190, 190)));
    background: -webkit-radial-gradient(rgb(250, 250, 250), rgb(220, 220, 220));
    background:    -moz-radial-gradient(rgb(250, 250, 250), rgb(220, 220, 220));
    background:     -ms-radial-gradient(rgb(250, 250, 250), rgb(220, 220, 220));
    background:      -o-radial-gradient(rgb(250, 250, 250), rgb(220, 220, 220));
    background:         radial-gradient(rgb(250, 250, 250), rgb(220, 220, 220));
/* use below for projector to have better contrast */
/*
    background: rgb(215, 215, 215);
    background: -webkit-gradient(radial, 50% 50%, 0, 50% 50%, 500, from(rgb(240, 240, 240)), to(rgb(190, 190, 190)));
    background: -webkit-radial-gradient(rgb(240, 240, 240), rgb(190, 190, 190));
    background:    -moz-radial-gradient(rgb(240, 240, 240), rgb(190, 190, 190));
    background:     -ms-radial-gradient(rgb(240, 240, 240), rgb(190, 190, 190));
    background:      -o-radial-gradient(rgb(240, 240, 240), rgb(190, 190, 190));
    background:         radial-gradient(rgb(240, 240, 240), rgb(190, 190, 190));
*/
    -webkit-transition: background 1s;
    -moz-transition:    background 1s;
    -ms-transition:     background 1s;
    -o-transition:      background 1s;
    transition:         background 1s;
}

h1, h2, h3, h4, h5, h6 {
  line-height: 1.2;
  margin: 0;
}

h1 {
  font-size: 68px;
}

/*
    ... and give links a nice look.
*/
a {
    color: inherit;
    text-decoration: none;
    -webkit-transition: 0.5s;
    -moz-transition:    0.5s;
    -ms-transition:     0.5s;
    -o-transition:      0.5s;
    transition:         0.5s;
}

a:hover,
a:focus {
    background: rgba(255,255,255,1);
    text-shadow: -1px -1px 2px rgba(100,100,100,0.5);
}

pre, code {
  background-color: #fff;
  border: 1px solid #d9d9d9;
  border-radius: 3px;
  font-family: 'PT Serif', georgia, serif;
  padding: 0 5px;
}

pre {
  line-height: 1.1;
  padding: 10px;
}

pre code {
  background-color: transparent;
  border: none;
  border-radius: 0;
  font-size: 38px;
  padding: 0;
}

label, 
select,
input[type="radio"],
input[type="checkbox"] {
  cursor: pointer;
  line-height: 1;
}

.muted {
  color: #999;
}

.footnote {
    font-size: 32px;
}

.block-list, .columnar {
  list-style: none;
  padding-left: 0;
}

.columnar li {
  display: inline-block;
  vertical-align: top;
  width: 420px;
}

.nav {
  font-size: 0;
  list-style: none;
  margin: 0;
  padding: 0;
}

.nav li, .nav a {
  display: inline-block;
  font-size: 48px;
}

.nav-divided > li + li:before {
  content: "\2022"; /* same as &#8226; in HTML (converter: http://www.evotech.net/articles/testjsentities.html) */
  margin: 0 20px;
}

.modal {
  border: 7px solid rgba(0, 0, 0, 0.3);
  border-radius: 5px;
  box-shadow: 0 0 18px rgba(0,0,0,0.4);
}

.modal-header {
  background-color: #fff;
  border-bottom: 1px solid #d9d9d9;
  box-sizing: border-box;
  padding: 10px;
  position: relative;
}

.modal-header:after {
  box-shadow: inset 0 10px 6px -6px rgba(0,0,0,.2);
  content: "";
  height: 10px;
  left: 0;
  position: absolute;
  right: 0;
  top: 100%;
  z-index: 500; /* position shadow above scrollable content below header */
}

.modal-body {
  background: #f2f2f2;
  font-size: 70%;
  height: 120px;
  overflow: auto;
  padding: 10px;
}

.form-share {
  background-color: #fff;
  border: 1px solid #d9d9d9;
  border-radius: 3px;
  padding: 30px;
  position: relative;
}

.form-share:after {
  background-color: #d9d9d9;
  bottom: 0;
  content: "";
  left: 50%;
  position: absolute;
  top: 0;
  width: 1px;
}

.form-share .plain {
  display: inline-block;
  font-size: 24px;
  vertical-align: top;
  width: 448px;
}

.control-boolean {
  font-size: 26px;
}

.control-boolean:not(:checked) {
  display: inline-block;
  font-size: 48px;
  height: 60px;
  position: relative;
  width: 60px;
}

.control-boolean:not(:checked) label {
  background-color: #e6e6e6;
  border: 1px solid #d9d9d9;
  border-radius: 3px;
  color: #777;
  display: block;
  height: 100%;
  text-indent: -9999px;
  width: 100%;
}

.control-boolean:not(:checked) label:before {
  float: left;
  height: 100%;
  line-height: 58px;
  text-align: center;
  text-indent: -1px;
  width: 100%;
}

.control-boolean:not(:checked) label.facebook:before {
  content: "f";
}

.control-boolean:not(:checked) label.twitter:before {
  content: "t";
}

.control-boolean:not(:checked) input {
  bottom: 0;
  cursor: pointer;
  height: 100%;
  left: 0;
  opacity: 0;
  position: absolute;
  right: 0;
  top: 0;
  width: 100%;
  z-index: 10;
}

.control-boolean:not(:checked) input:checked ~ label.facebook {
  background-color: #5c7fc9;
  border-color: transparent;
  border-bottom: 1px solid #203666;
  border-top: 1px solid #6a91e5;
  color: #fff;
}

.control-boolean:not(:checked) input:checked ~ label.twitter {
  background-color: #299be2;
  border-color: transparent;
  border-bottom: 1px solid #124373;
  border-top: 1px solid #2ca6f2;
  color: #fff;
}

a.print-attr:after {
  content: " (" attr(href) ")";
}

abbr.print-attr:first-of-type:after {
  content: " (" attr(title) ")";
}

.btn {
  border: 1px solid #d3d3d3;
  border-radius: 2px;
  cursor: pointer;
  display: inline-block;
  line-height: normal; /* so input, button and anchors all render at the same size */
  padding: 6px 12px;
  text-align: center;
}

a.btn:hover, a.btn:focus {
  text-shadow: none;
}

/**
 * Modification of the hint.css project
 * https://github.com/chinchang/hint.css
 */
.hint {
  display: inline-block;
  position: relative;
}

/**
 * tooltip arrow -> :before
 * tooltip body  -> :after
 */
.hint:before, 
.hint:after {
  opacity: 0;
  pointer-events: none;
  position: absolute;
  z-index: 1000000;
}

.hint:hover:before, 
.hint:hover:after {
  opacity: 1;
}

.hint:before {
  border: 10px solid transparent;
  content: '';
  z-index: 1000001;
}

.hint:after {
  background-color: #222;
  border: 1px solid #ccc; /* fallback if rgba isn't supported */
  border: 1px solid rgba(255, 255, 255, 0.2);
  border-radius: 3px;
  box-shadow: 0 1px 10px rgba(0, 0, 0, 0.5);
  color: #fff;
  content: attr(data-hint);
  padding: 6px 12px;
  white-space: nowrap;
}

.hint-always:before,
.hint-always:after {
  opacity: 1;
}

/**
 * left tootip
 */
.hint-left:before {
  border-left-color: #222;
  bottom: 50%;
  margin-right: -4px; /* so arrow overlaps border on hint body */
  margin-bottom: -10px;
}

.hint-left:after {
  bottom: 0;
  top: -1px;
  margin-right: 15px;
}

.hint-left:before, 
.hint-left:after {
  right: 100%;
}

/**
 * right tootip
 */
.hint-right:before {
  border-right-color: #222;
  bottom: 50%;
  right: -16px; /* so arrow overlaps border on hint body */
  margin-bottom: -10px;
}

.hint-right:after {
  bottom: 0;
  top: -1px;
  margin-left: 15px;
}

.hint-right:before, 
.hint-right:after {
  left: 100%;
}

/*
    Because the main point behind the impress.js demo is to demo impress.js
    we display a fallback message for users with browsers that don't support
    all the features required by it.

    All of the content will be still fully accessible for them, but I want
    them to know that they are missing something - that's what the demo is
    about, isn't it?

    And then we hide the message, when support is detected in the browser.
*/

.fallback-message {
    font-family: sans-serif;
    line-height: 1.3;

    width: 780px;
    padding: 10px 10px 0;
    margin: 20px auto;

    border: 1px solid #E4C652;
    border-radius: 10px;
    background: #EEDC94;
}

.fallback-message p {
    margin-bottom: 10px;
}

.impress-supported .fallback-message {
    display: none;
}

/*
    Now let's style the presentation steps.

    We start with basics to make sure it displays correctly in everywhere ...
*/

.step {
    position: relative;
    width: 900px;
    margin: 20px auto;
    font-family: 'PT Serif', georgia, serif;
    font-size: 48px;
    line-height: 1.5;
}

/*
    ... and we enhance the styles for impress.js.

    Basically we remove the margin and make inactive steps a little bit transparent.
*/
.impress-enabled .step {
    margin: 0;
    opacity: 0.3;

    -webkit-transition: opacity 1s;
    -moz-transition:    opacity 1s;
    -ms-transition:     opacity 1s;
    -o-transition:      opacity 1s;
    transition:         opacity 1s;
}

.impress-enabled .step.active {
  opacity: 1;
  z-index: 10;
}

#pseudo-class-link .element {
  opacity: 0;
  -webkit-transition: opacity 1s ease 5s;
  -moz-transition:    opacity 1s ease 5s;
  -ms-transition:     opacity 1s ease 5s;
  -o-transition:      opacity 1s ease 5s;
  transition:         opacity 1s ease 5s;
}

#pseudo-class-link.active .element {
  opacity: 1;
}

.impress-on-modal-example {
  background-color: rgba(0, 0, 0, 0.5);
  background-image: none;
}

/*
    The last step is an overview.
    There is no content in it, so we make sure it's not visible because we want
    to be able to click on other steps.

*/
#overview { display: none }

/*
    We also make other steps visible and give them a pointer cursor using the
    `impress-on-` class.
*/
.impress-on-overview .step {
    opacity: 1;
    cursor: pointer;
}

/*
    And as the last thing there is a workaround for quite strange bug.
    It happens a lot in Chrome. I don't remember if I've seen it in Firefox.

    Sometimes the element positioned in 3D (especially when it's moved back
    along Z axis) is not clickable, because it falls 'behind' the <body>
    element.

    To prevent this, I decided to make <body> non clickable by setting
    pointer-events property to `none` value.
    Value if this property is inherited, so to make everything else clickable
    I bring it back on the #impress element.

    If you want to know more about `pointer-events` here are some docs:
    https://developer.mozilla.org/en/CSS/pointer-events

    There is one very important thing to notice about this workaround - it makes
    everything 'unclickable' except what's in #impress element.

    So use it wisely ... or don't use at all.
*/
.impress-enabled          { pointer-events: none }
.impress-enabled #impress { pointer-events: auto }
